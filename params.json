{"name":"Php-po-parser","tagline":"PO files parser for PHP","body":"Po Parser\r\n=========\r\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/raulferras/PHP-po-parser?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n[![Build Status](https://travis-ci.org/raulferras/PHP-po-parser.png?branch=master)](https://travis-ci.org/raulferras/PHP-po-parser)\r\n[![Code Coverage](https://scrutinizer-ci.com/g/raulferras/PHP-po-parser/badges/coverage.png?s=a19ece2a8543b085ab1a5db319ded3bc4530b567)](https://scrutinizer-ci.com/g/raulferras/PHP-po-parser/)\r\n[![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/raulferras/PHP-po-parser/badges/quality-score.png?s=6aaf3c31ce15cebd1d4bed718cd41fd2d921fd31)](https://scrutinizer-ci.com/g/raulferras/PHP-po-parser/)\r\n[![Latest Stable Version](https://poser.pugx.org/leaphly/cart-bundle/version.png)](https://packagist.org/packages/sepia/po-parser)\r\n\r\nPoParser is a personal project to fulfill a need I got: parse Gettext Portable files (*.po files) and edit its content using PHP.  \r\n\r\nPoParser will allow you to read PO Data from any source (files and strings built-in), update it and store back to a file (or get the compiled string).\r\n\r\nIt supports following parsing features:\r\n\r\n- header section.\r\n- msgid, both single and multiline.\r\n- msgstr, both single and multiline.\r\n- msgctxt (Message context).\r\n- msgid_plural (plurals forms).\r\n- #, keys (flags).\r\n- # keys (translator comments).\r\n- #. keys (Comments extracted from source code).\r\n- #: keys (references).\r\n- #| keys (previously untranslated), both single and multiline.\r\n- #~ keys (old entries), both single and multiline.\r\n\r\nUsage\r\n=====\r\n\r\n    // Parse a po file\r\n    $poParser = new Sepia\\PoParser();\r\n    $entries  = $poParser->parseFile( 'es.po' );\r\n    // $entries contains every entry in es.po file.\r\n\r\n    // Update entries\r\n    $msgid = 'Press this button to save';\r\n    $msgstr= 'Pulsa este botÃ³n para guardar';\r\n    $poParser->updateEntry($msgid, $msgstr);\r\n    // You can also change translator comments, code comments, flags...\r\n\r\n\r\n\r\nChangelog\r\n=========\r\nv4.1.1\r\n* Fixes with multi-flags entries (thanx @gnouet)\r\n\r\nv4.1\r\n* Constructor now accepts options to define separator used in multiline msgid entries.\r\n* New method `getOptions()`.\r\n\r\nv4.0\r\n\r\n* new methods parseString() and parseFile() replace the old parse()`\r\n* new method writeFile() replaces the old write().\r\n* new method compile() which takes all parsed entries and coverts back to a PO formatted string.\r\n\r\n[See whole changelog](https://github.com/raulferras/PHP-po-parser/wiki/Changelog)\r\n\r\n\r\nDocumentation\r\n=============\r\n[See v4 documentation](https://github.com/raulferras/PHP-po-parser/wiki/Documentation-4.0)\r\n\r\n\r\nTesting\r\n=======\r\nTests are done using PHPUnit.\r\nTo execute tests, from command line type: \r\n\r\n```\r\nphp vendor/bin/phpunit\r\n```\r\n\r\n\r\nInstall via composer\r\n====================\r\nEdit your composer.json file to include the following:\r\n\r\n    {\r\n        \"require\": {\r\n            \"sepia/po-parser\": \"dev-master\"\r\n        }\r\n    }\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}