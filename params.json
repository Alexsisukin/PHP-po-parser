{"name":"Php-po-parser","tagline":"PO files parser for PHP","body":"Po Parser\r\n=========\r\n\r\nPo Parser is a personal project to fulfill a need I got: parse po files and edit its content using PHP.\r\n\r\nMethods\r\n=======\r\n## read( $file_path )\r\nThis method parses a `po` file and returns an array with its entries.  \r\n\r\n### Parameters\r\n`$file_path`: String. po filepath.\r\n\r\n### Returns\r\nAn `Array` of `entries`.  \r\nEach `entry` has the following keys:\r\n\r\n- `msgid`: String Array. Entry identifier.\r\n- `msgstr`: String Array. Translated string.\r\n- `reference`: String Array. Source code filepaths where this message is found.\r\n- `msgctxt`: String. Disambiguating context.\r\n- `tcomment`: String Array. Translator comments.\r\n- `ccomment`: String Array. Source code comments linked to the message.\r\n- `obsolete`: Bool (1/0). Marks the entry as obsolete.\r\n- `fuzzy`: Bool (1/0). Marks the entry as a fuzzy translation.\r\n\r\n### Throws\r\nThis method throws `Exception` if file cannot be opened and parse error or a logic error occurs.\r\n\r\n\r\n## headers()\r\nCalled after `read()` method, returns the headers of the file, if present.\r\n\r\n### Returns \r\nAn `Array` of strings containing all headers present in the file.\r\n\r\n## write( $file_path )\r\nThis method writes a `po` file from the internal `$entries` property.  \r\n\r\n### Throws\r\nThis method throws `Exception` if output file cannot be opened to write.\r\n\r\n\r\n## update_entry( $msgid, $msgstr )\r\nThis method updates an entry parsed previously with `read` method.\r\n\r\n### Parameters\r\n`$msgid`: Entry identifier.  \r\n`$msgstr`: Translation to be stored.\r\n\r\nWhen updating an entry that makes use of a **Disambiguating Context**, use &lt;context>!&lt;msgid> as the first parameter.\r\nExample:\r\n\r\n    // Edit the message \"Welcome user!\"\r\n    $poparser->update_entry( \"Welcome user!\", \"Bienvenido usuario!\" );\r\n    \r\n    // Edit the message \"N\" in the Dissambiguating Context \"North\"\r\n    $poparser->update_entry( \"N!Norte\" );\r\n\r\n    // Edit the message \"N\" in the Dissambiguating Context \"No\"\r\n    $poparser->update_entry( \"N!No\" );\r\n\r\n\r\n\r\nUsage\r\n=====\r\n## Reading Po Content\r\n\r\n    $poparser = new PoParser();\r\n    entries = $poparser->read( 'my-pofile.po' );\r\n    // Now $entries contains every string information in your pofile\r\n    \r\n    echo '<ul>';\r\n    foreach( $entries AS $entry )\r\n    {\r\n       echo '<li>'.\r\n       '<b>msgid:</b> '.implode('<br>',$entry['msgid']).'<br>'.         // Message ID\r\n       '<b>msgstr:</b> '.implode('<br>',$entry['msgstr']).'<br>'.       // Translation\r\n       '<b>reference:</b> '.implode('<br>',$entry['reference']).'<br>'. // Reference\r\n       '<b>msgctxt:</b> ' . $entry['msgctxt'].'<br>'.   // Message Context\r\n       '<b>tcomment:</b> ' . implode(\"<br>\",$entry['tcomment']).'<br>'. // Translator comment\r\n\t   '<b>ccomment:</b> ' . implode(\"<br>\",$entry['ccomment']).'<br>'. // Code Comment\r\n\t   '<b>obsolete?:</b> '.(string)$entry['obsolete'].'<br>'. // Is obsolete?\r\n\t\t'<b>fuzzy?:</b> ' .(string)$entry['fuzzy'].     // Is fuzzy?\r\n\t\t'</li>';\r\n\t}\r\n\techo '</ul>';\r\n\t\r\n\t\r\n## Modify Content\r\n\r\n    $poparser = new PoParser();\r\n    $poparser->read( 'my-pofile.po' );\r\n    // Entries are stored in `$pofile` object, so you can modify them.\r\n    \r\n    // Use `update_entry( msgid, msgstr )` to change the messages you want.\r\n    $poparser->update_entry( 'Write your email', 'Escribe tu email' );\r\n    $poparser->write( 'my-pofile.po' );\r\n\r\n\r\nTodo\r\n====\r\n* Define as composer project.\r\n* Unit tests.\r\n* Improve interface to edit entries.\r\n* <strike>Discover what's the meaning of the line \"#@ \".</strike> It was just a comment `# @`.\r\n\r\n\r\nChangelog\r\n=========\r\n\r\n###v2.1\r\nVersion 2.1 has the following changes:\r\n\r\n* fixes errors when saving msgid_plurals (thanks @felixgilles).\r\n* Now it handles entries using msgctxt correctly by not merging them into a single entry.\r\n* Headers of some file headers were being ignored because of a too strict check.\r\n* A new method is introduced to read file headers: `headers()`.\r\n\r\n###v2.0\r\nVersion 2.0 introduces a lot of bug fixes, mainly related to multiline entries. I also decide to change class name to something more semantic (`PoParser`) as I felt old name was not well suited.  \r\nCheck `read` documentation to look for changes in data returned.\r\n\r\n* Class name changed to `PoParser`.\r\n* Improve reading of multiline entries.\r\n* Fix ending quotes being removed on multiline `msgid` and `msgstr`.\r\n* Possible bug with `msg_id_plural`.\r\n* `read` method throws `Exception` if an error occurs.\r\n* Translator and source code **Multiline comments**  are properly parsed.\r\n\r\n\r\n###v1.0\r\n* First version.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}